import cv2
import os
import numpy as np

# # Set path to dataset folder
# data_dir = 'data'

# # Set path to output folder
# output_dir = 'data'

# # Initialize SIFT object
# sift = cv2.SIFT_create()

# t = True

# # Loop through training images and compute SIFT descriptors
# for class_name in os.listdir(os.path.join(data_dir, 'processed', 'train')):
#     class_dir = os.path.join(data_dir, 'processed', 'train', class_name)
#     for foldername in os.listdir(class_dir):
#         for filename in os.listdir(os.path.join(class_dir,foldername)):
#             # Load image
#             img_path = os.path.join(class_dir,foldername, filename)
#             img = cv2.imread(img_path)
            
#             # Convert to grayscale
#             gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
#             # Detect keypoints and compute descriptors
#             keypoints, descriptors = sift.detectAndCompute(gray, None)

#             if t:
#                 print("keypoints: " , keypoints)
#                 print("descriptors: " , descriptors)
#                 t= False
            
#             # Save descriptors to file
#             output_file = os.path.join(output_dir, 'sift', 'train', class_name,foldername, filename.split('.')[0] + '.npy')
#             np.save(output_file, descriptors)


print(cv2.__version__)
sift = cv2.xfeatures2d.SIFT_create()
sift = cv2.SIFT_create()


#     #######################################################
# # Set path to dataset folder
# data_dir = 'data'

# # Set path to output folder
# output_dir = 'data'

# # Initialize SIFT object
# sift = cv2.SIFT_create()

# t = True

# # Loop through training images and compute SIFT descriptors
# for class_name in os.listdir(os.path.join(data_dir, 'processed', 'train')):
#     class_dir = os.path.join(data_dir, 'processed', 'train', class_name)
#     for foldername in os.listdir(class_dir):
#         for filename in os.listdir(os.path.join(class_dir,foldername)):
#             # Load image
#             img_path = os.path.join(class_dir,foldername, filename)
#             img = cv2.imread(img_path)
            
#             # Convert to grayscale
#             gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
#             # Detect keypoints and compute descriptors
#             keypoints, descriptors = sift.detectAndCompute(gray, None)

#             if t:
#                 print("keypoints: " , keypoints)
#                 print("descriptors: " , descriptors)
#                 t= False
            
#             # Save descriptors to file
#             output_file = os.path.join(output_dir, 'sift', 'train', class_name,foldername, filename.split('.')[0] + '.npy')
#             np.save(output_file, descriptors)






# #######################################

# # Set path to dataset folder
# data_dir = 'path/to/dataset'

# # Set path to output folder
# output_dir = 'path/to/output'

# # Initialize SIFT object
# sift = cv2.SIFT_create()

# # Loop through training images and compute SIFT descriptors
# for class_name in os.listdir(os.path.join(data_dir, 'train')):
#     class_dir = os.path.join(data_dir, 'train', class_name)
#     for filename in os.listdir(class_dir):
#         # Load image
#         img_path = os.path.join(class_dir, filename)
#         img = cv2.imread(img_path)
        
#         # Convert to grayscale
#         gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
#         # Detect keypoints and compute descriptors
#         keypoints, descriptors = sift.detectAndCompute(gray, None)
        
#         # Save descriptors to file
#         output_file = os.path.join(output_dir, 'train', class_name, filename.split('.')[0] + '.npy')
#         np.save(output_file, descriptors)

# # Loop through test images and compute SIFT descriptors
# for class_name in os.listdir(os.path.join(data_dir, 'test')):
#     class_dir = os.path.join(data_dir, 'test', class_name)
#     for filename in os.listdir(class_dir):
#         # Load image
#         img_path = os.path.join(class_dir, filename)
#         img = cv2.imread(img_path)
        
#         # Convert to grayscale
#         gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
#         # Detect keypoints and compute descriptors
#         keypoints, descriptors = sift.detectAndCompute(gray, None)

#         print(keypoints, descriptors)
        
#         # Save descriptors to file
#         output_file = os.path.join(output_dir, 'test', class_name, filename.split('.')[0] + '.npy')
#         np.save(output_file, descriptors)